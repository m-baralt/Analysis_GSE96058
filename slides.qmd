---
title: "RNA-seq in breast cancer"
format:
  revealjs:
    css: custom.css
editor: visual
author: Maria Barranco Altirriba
---

```{r setup}
knitr::opts_knit$set(root.dir = "/home/maria/BERN/")
```

## Introduction {.smaller}
### Study description 

::: {.incremental}

* **Study:** Brueffer C et al. Clinical Value of RNA Sequencing-Based Classifiers for Prediction of the Five Conventional Breast Cancer Biomarkers: A Report From the Population-Based Multicenter Sweden Cancerome Analysis Network-Breast Initiative. JCO Precis Oncol. 2018 Mar 9;2:PO.17.00135. doi: 10.1200/PO.17.00135. PMID: 32913985; PMCID: PMC7446376.

* **Objective:** Develop mRNA-based classifiers for five conventional breast cancer biomarkers: estrogen receptor (ER), progesterone receptor (PgR), human epidermal growth factor receptor 2 (HER2), Ki67, and Nottingham histologic grade (NHG), and test if the new predictors would add value for risk stratification. 

* **Datasets:** 
  + Training: 405 tumor samples that underwent multi-rater histopathologic evaluation.
  + Validation: 3,273 tumor samples from a prospective population (follow-up time of (median) 52 months)
  
:::
  
## Methods {.scrollable .smaller}
### GEO data description 

::: {.incremental}
  
* **GEO:** 
  + Series GSE96058 (Requested): It contains the validation cohort (3,273 samples). 
  + Part of SuperSeries GSE81540: GSE96058 and GSE81538 (405 samples cohort - training) 
  
* **Downloading:**
  + *getGEO("GSE96058")* from *GEOquery* package is used to obtain phenotype data. 
  + *getGEOSuppFiles("GSE96058")* downloads "GSE96058_UCSC_hg38_knownGenes_22sep2014.gtf.gz", which contains gene annotation information. 
  + "GSE96058_transcript_expression_3273_samples_and_136_replicates.csv.gz" is available in GEO, which contains transcript information
  + "GSE96058_gene_expression_3273_samples_and_136_replicates_transformed.csv.gz" is available in GEO, which contains gene expression obtained by mapping the transcript expression to the known genes table and summing all transcripts that belong to the same gene. 
  + The gene expression data is downloaded using:
  ```bash
  wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE96nnn/GSE96058/suppl/GSE96058_gene_expression_3273_samples_and_136_replicates_transformed.csv.gz
  ```
:::

## Methods {.scrollable .smaller}
### Data description steps 

::: {.incremental}
  
* Descriptive statistics with *CompareGroups* R package.

* Gene expression filtering based on genes variance (Second decile).

* Principal Components Analysis (PCA)



:::

## Results {.smaller}
### Descriptive statistics 

```{r, warning=FALSE}
library(ggplot2)
pheno_data <- read.csv("/home/maria/BERN/data/pheno_data.csv", row.names = 1)

vars_interest <- c("age.at.diagnosis.ch1", "chemo.treated.ch1", "endocrine.treated.ch1",
                   "er.status.ch1", "her2.status.ch1", "ki67.status.ch1", "lymph.node.group.ch1",
                   "lymph.node.status.ch1", "nhg.ch1", "overall.survival.days.ch1", "pam50.subtype.ch1",
                   "pgr.status.ch1", "tumor.size.ch1")

pheno_data$overall.survival.event.ch1 <- as.factor(pheno_data$overall.survival.event.ch1)

p_age <- ggplot(pheno_data, aes(x=age.at.diagnosis.ch1, fill=overall.survival.event.ch1)) +
    geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity', bins = 30) +
    scale_fill_manual(values=c("#69b3a2", "#404080")) +
    labs(fill = "Survival", x = "Age at diagnosis (years)") +
  theme_bw() +
  theme(axis.title.y = element_blank())

p_tumor.size.ch1 <- ggplot(pheno_data, aes(x=tumor.size.ch1, fill=overall.survival.event.ch1)) +
    geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity', bins = 30) +
    scale_fill_manual(values=c("#69b3a2", "#404080")) +
    labs(fill = "Survival", x = "Age at diagnosis (years)") +
  theme_bw() +
  theme(axis.title.y = element_blank())

ggpubr::ggarrange(plotlist = list(p_age, p_tumor.size.ch1), ncol = 2, 
                  common.legend = TRUE, legend = "bottom")

```

## Results {.scrollable .smaller}
### Descriptive statistics

```{r}
library(compareGroups)

vars_interest <- c("age.at.diagnosis.ch1", "chemo.treated.ch1", "endocrine.treated.ch1",
                   "er.status.ch1", "her2.status.ch1", "ki67.status.ch1", "lymph.node.group.ch1",
                   "lymph.node.status.ch1", "nhg.ch1", "overall.survival.days.ch1", "pam50.subtype.ch1",
                   "pgr.status.ch1", "tumor.size.ch1")

# factors are converted to factors
pheno_data$chemo.treated.ch1 <- as.factor(pheno_data$chemo.treated.ch1)
pheno_data$endocrine.treated.ch1 <- as.factor(pheno_data$endocrine.treated.ch1)
pheno_data$er.status.ch1 <- as.factor(pheno_data$er.status.ch1)
pheno_data$her2.status.ch1 <- as.factor(pheno_data$her2.status.ch1)
pheno_data$ki67.status.ch1 <- as.factor(pheno_data$ki67.status.ch1)
pheno_data$lymph.node.group.ch1 <- as.factor(pheno_data$lymph.node.group.ch1)
pheno_data$lymph.node.status.ch1 <- as.factor(pheno_data$lymph.node.status.ch1)
pheno_data$nhg.ch1 <- as.factor(pheno_data$nhg.ch1)
pheno_data$pam50.subtype.ch1 <- as.factor(pheno_data$pam50.subtype.ch1)
pheno_data$pgr.status.ch1 <- as.factor(pheno_data$pgr.status.ch1)


res<-compareGroups(as.formula(paste0("overall.survival.event.ch1 ~ ", paste(vars_interest, collapse = "+"))), 
                   data=pheno_data)
createTable(res, show.all = TRUE, show.n = TRUE)

```
## Results
### PCA for quality control

```{r}
expr_data <- readRDS("/home/maria/BERN/data/GSE96058_expr_data.rds")
expr_data_t <- as.data.frame(t(expr_data))
gene_vars <- apply(expr_data_t, 2, var)
threshold <- quantile(gene_vars, probs = seq(0,1, 0.1))[3]
filtered_expr <- expr_data_t[, gene_vars > threshold]

pca_result <- RSpectra::svds(scale(as.matrix(filtered_expr), center = TRUE, scale = TRUE), k = 10)

pca_u <- pca_result$u
rownames(pca_u) <- rownames(filtered_expr)
colnames(pca_u) <- paste0("PC", 1:ncol(pca_u))
pca_u <- as.data.frame(pca_u)
singular_values <- pca_result$d
explained_variance <- singular_values^2 / sum(singular_values^2)
pcs_var <- data.frame(PC = paste0("PC",1:10), var = explained_variance[1:10])
pcs_var$PC <- factor(pcs_var$PC, levels = unique(pcs_var$PC))

rownames(pheno_data) <- pheno_data$title
pheno_data <- pheno_data[,-1]

merge_pca <- merge(pheno_data, pca_u, by = 0)
rownames(merge_pca) <- merge_pca$Row.names
merge_pca <- merge_pca[,-1]
merge_pca <- data.frame(Replicates = as.factor(grepl(pattern = "repl", x = rownames(merge_pca))*1), merge_pca)

p_platform <- ggplot(aes(x = PC1, y = PC2, color = platform_id), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"),
       color = "Platform")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 11),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14, 
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c("#FF7F00", "#0288D1"))


p_repl <- ggplot(aes(x = PC1, y = PC2, color = Replicates), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"),
       color = "Replicates")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14, 
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c("#FF7F00", "#0288D1"))

ggpubr::ggarrange(plotlist = list(p_platform, p_repl), ncol = 2)

```


## Results
### PCA for biological patterns

```{r}
merge_pca <- merge_pca[merge_pca$Replicates==0,]
merge_pca <- merge_pca[,-1]
p_age <- ggplot(aes(x = PC1, y = PC2, color = age.at.diagnosis.ch1), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"), color = "Age at diagnosis")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14,
                                margin = margin(r = 18, b = 10))) +
  scale_color_gradientn(colors = c("yellow", "orange", "red", "darkred"),
                        guide = guide_colorbar(
                          title.position = "left",
                          title.vjust = 0.8  # Increase or decrease to nudge the title upward/downward
                        ))

p_chemo <- ggplot(aes(x = PC1, y = PC2, color = chemo.treated.ch1), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"), color = "Chemotherapy")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14,
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c("#FF7F00", "#0288D1"))

p_endocrine <- ggplot(aes(x = PC1, y = PC2, color = endocrine.treated.ch1), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"), color = "Endocrine treatment")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14,
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c("#FF7F00", "#0288D1"))


p_her2 <- ggplot(aes(x = PC1, y = PC2, color = her2.status.ch1), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"), color = "HER2")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14,
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c("#FF7F00", "#0288D1"))


p_ki67 <- ggplot(aes(x = PC1, y = PC2, color = ki67.status.ch1), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"), color = "Ki67")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14,
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c("#FF7F00", "#0288D1"))

p_er <- ggplot(aes(x = PC1, y = PC2, color = er.status.ch1), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"), color = "ER")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14,
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c("#FF7F00", "#0288D1"))

p_nhg <- ggplot(aes(x = PC1, y = PC2, color = nhg.ch1), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"), color = "NHG")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14,
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c("#FFCA00", "#FF4500",  "#7B1FA2"))

p_pgr <- ggplot(aes(x = PC1, y = PC2, color = pgr.status.ch1), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"), color = "PgR")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14, 
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c("#FF7F00", "#0288D1"))

p_lymphnode <- ggplot(aes(x = PC1, y = PC2, color = lymph.node.group.ch1), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"), color = "Lymph node status")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14,
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c(
    #"#FFEB3B",  # Bright Yellow
    "#FFCA00",  # Yellow-Orange
    #"#FF7F00",  # Strong Orange
    "#FF4500",  # Orange Red
    "#7B1FA2",  # Blue
    "#0288D1"  # Violet Purple - distinct and elegant
    #"#C2185B",  # Medium Blue - cool and visually contrasting
    #"#7A0000"   # Medium Green - still blends well, but stands out
  ))

p_pam50 <- ggplot(aes(x = PC1, y = PC2, color = pam50.subtype.ch1), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"), color = "PAM50 subtype")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14,
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c(
    #"#FFEB3B",  # Bright Yellow
    "#FFCA00",  # Yellow-Orange
    #"#FF7F00",  # Strong Orange
    "#FF4500",  # Orange Red
    "#7B1FA2",  # Blue
    "#0288D1",  # Violet Purple - distinct and elegant
    #"#C2185B",  # Medium Blue - cool and visually contrasting
    "#7A0000"   # Medium Green - still blends well, but stands out
  ))

p_survival <- ggplot(aes(x = PC1, y = PC2, color = overall.survival.event.ch1), data = merge_pca) + 
  geom_point(alpha = 0.7, size = 1.5) + theme_bw() + 
  labs(x = paste0("PC1 (", round(pcs_var$var[1]*100, 2), "%)"),
       y = paste0("PC2 (", round(pcs_var$var[2]*100, 2), "%)"), color = "Survival")+
  theme(
    legend.position = "bottom",                    
    #legend.title = element_text(size = 12, margin = margin(r = 15, b = 10)),
    legend.key.width = unit(1.25, "cm"),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 11),
    legend.text = element_text(size = 11),
    legend.title = element_text(size = 14,
                                margin = margin(r = 18, b = 10))) +
  scale_color_manual(values = c("#FF7F00", "#0288D1"))

```

```{r}
ggpubr::ggarrange(p_age, p_survival, ncol = 2)
```


## Results
### PCA for biological patterns

```{r}
ggpubr::ggarrange(p_chemo, p_endocrine, ncol = 2)
```

## Results
### PCA for biological patterns

```{r}
ggpubr::ggarrange(p_er, p_pgr, ncol = 2)
```

## Results
### PCA for biological patterns

```{r}
ggpubr::ggarrange(p_her2, p_ki67, p_nhg, ncol = 3)
```

## Results
### PCA for biological patterns

```{r}
ggpubr::ggarrange(p_lymphnode, p_pam50, ncol = 2)
```
## Results
### NHG

```{r}
doParallel::registerDoParallel(20)
merged_expr <- merge(pheno_data, filtered_expr, by = 0)
rownames(merged_expr) <- merged_expr$Row.names
merged_expr <- merged_expr[,-1]

pvals_nhg <- plyr::ldply(colnames(filtered_expr), function(gene){
  formula_str <- as.formula(paste0("`",gene, "`", "~ age.at.diagnosis.ch1 + tumor.size.ch1 + lymph.node.group.ch1 + nhg.ch1"))
  model_lm <- lm(formula_str, data = merged_expr)
  s <- summary(model_lm)
  pvals <- s$coefficients[c("nhg.ch1G2", "nhg.ch1G3"), 4]
  beta <- s$coefficients[c("nhg.ch1G2", "nhg.ch1G3"), 1]
  data.frame(Gene = gene, t(pvals), t(beta))
},.parallel = TRUE)

pvals_nhg$p_adj_G2 <- p.adjust(pvals_nhg$nhg.ch1G2, "bonferroni")
pvals_nhg$p_adj_G3 <- p.adjust(pvals_nhg$nhg.ch1G3, "bonferroni")

```

```{r}

pvals_lymph_status <- plyr::ldply(colnames(filtered_expr), function(gene){
  formula_str <- as.formula(paste0("`",gene, "`", "~ age.at.diagnosis.ch1 + tumor.size.ch1 + lymph.node.status.ch1"))
  model_lm <- lm(formula_str, data = merged_expr)
  s <- summary(model_lm)
  pvals <- s$coefficients[c("lymph.node.status.ch1NodePositive"), 4]
  beta <- s$coefficients[c("lymph.node.status.ch1NodePositive"), 1]
  data.frame(Gene = gene, pvalue = pvals, beta = beta)
},.parallel = TRUE)

pvals_lymph_status$p_adj_lymph_status <- p.adjust(pvals_lymph_status$pvalue, "bonferroni")

```

```{r}

pvals_er <- plyr::ldply(colnames(filtered_expr), function(gene){
  formula_str <- as.formula(paste0("`",gene, "`", "~ age.at.diagnosis.ch1 + tumor.size.ch1 + lymph.node.status.ch1 + er.status.ch1"))
  model_lm <- lm(formula_str, data = merged_expr)
  s <- summary(model_lm)
  pvals <- s$coefficients[c("lymph.node.status.ch1NodePositive"), 4]
  beta <- s$coefficients[c("lymph.node.status.ch1NodePositive"), 1]
  data.frame(Gene = gene, pvalue = pvals, beta = beta)
},.parallel = TRUE)

pvals_er$p_adj_er <- p.adjust(pvals_er$pvalue, "bonferroni")

```

```{r}
library(gprofiler2)

gene_list <- pvals_nhg$Gene[pvals_nhg$p_adj_G2<0.05]

#convert_genes <- gconvert(gene_list, organism = "hsapiens")

gostres <- gost(
  query = gene_list,
  organism = "hsapiens",     
  sources = c("GO:BP", "GO:MF", "GO:CC", "REAC", "KEGG"),  
  significant = TRUE, 
  correction_method = "gSCS" # built-in multiple testing correction
)
head(gostres$result)

gostplot(gostres, capped = TRUE, interactive = TRUE)

```

```{r}
gene_list <- pvals_er$Gene[pvals_er$p_adj_er<0.05]

#convert_genes <- gconvert(gene_list, organism = "hsapiens")

gostres <- gost(
  query = gene_list,
  organism = "hsapiens",     
  sources = c("GO:BP", "GO:MF", "GO:CC", "REAC", "KEGG"),  
  significant = TRUE, 
  correction_method = "gSCS" # built-in multiple testing correction
)
head(gostres$result)

gostplot(gostres, capped = TRUE, interactive = TRUE)

```

```{r}
library(survival)
library(survminer)

merged_expr$overall.survival.event.ch1 <- as.numeric(as.character(merged_expr$overall.survival.event.ch1))

is_valid_name <- function(x) {
  make.names(x) == x
}

pvals_cox <- plyr::ldply(colnames(filtered_expr), .inform = TRUE, function(gene){
  formula_part <- as.formula(paste0("Surv(overall.survival.days.ch1, overall.survival.event.ch1) ~","`",
                         gene, "`", "+ age.at.diagnosis.ch1 + tumor.size.ch1 + lymph.node.status.ch1"))
  res.cox <- coxph(formula_part, data = merged_expr)
  s <- summary(res.cox)
  if (!((sum(is.infinite(s$coefficients))>0) | (sum(is.infinite(s$conf.int))>0))){
    PH <- cox.zph(res.cox)
    PH.assum <- t(PH$table[,3])
    colnames(PH.assum)[1] <- "gene"
    
    #gene_name <- rownames(s$coefficients)[grepl(pattern = gene, rownames(s$coefficients))]
    gene_name <- ifelse(is_valid_name(gene), gene, paste0("`",gene,"`"))
    nSample <- s$n
    pval <- s$coefficients[gene_name,5]
    HR <- s$coefficients[gene_name,2]
    SE <- s$coefficients[gene_name,3]
    data.frame(Feature = gene, pval = pval, HR = HR, SE = SE, nSample = nSample, PH.assum)
  }
  
},.parallel = TRUE)

pvals_cox$p_adj <- p.adjust(pvals_cox$pval, "fdr")

pvals_cox_filt <- pvals_cox[pvals_cox$GLOBAL>0.05,]

```

```{r}
gene_list <- pvals_cox_filt$Feature[pvals_cox_filt$p_adj<0.05]

#convert_genes <- gconvert(gene_list, organism = "hsapiens")

gostres <- gost(
  query = gene_list,
  organism = "hsapiens",     
  sources = c("GO:BP", "GO:MF", "GO:CC", "REAC", "KEGG"),  
  significant = TRUE, 
  correction_method = "gSCS" # built-in multiple testing correction
)
head(gostres$result)

gostplot(gostres, capped = TRUE, interactive = TRUE)

```


```{r}
library(ranger)

survival_merged_expr <- merged_expr[,c("age.at.diagnosis.ch1", "chemo.treated.ch1", 
                                       "endocrine.treated.ch1","lymph.node.status.ch1", 
                                       "nhg.ch1", "tumor.size.ch1", "overall.survival.days.ch1", 
                                       "overall.survival.event.ch1",
                                       colnames(filtered_expr))]

survival_merged_expr <- as.data.frame(na.omit(survival_merged_expr))

x_vars <- survival_merged_expr[, -which(names(survival_merged_expr) %in% c("overall.survival.days.ch1", "overall.survival.event.ch1"))]
y_vars <- Surv(survival_merged_expr$overall.survival.days.ch1, survival_merged_expr$overall.survival.event.ch1)

model_surv <- ranger(
  dependent.variable.name = NULL,
  y = y_vars,
  x = x_vars,
  num.trees = 500,
  importance = "impurity",
  splitrule = "logrank",
  num.threads = 10
)


```



